node() {
  properties([
    parameters([
      string(name: 'GIT_BRANCH', defaultValue: 'master',
        description: 'Git branch to run the tests from', ),
      choice(choices: ['DEV', 'QA'],
        description: 'Which test environment?', name: 'TARGET'),
      choice(choices: ['harshvegada1997@gmail.com', 'write2technocredits@gmail.com'],
        description: 'Which user from config file?', name: 'CONFIG_USER')
    ])
  ])

  dir('sensiaglobal-automation-e2e') {
    stage('Checkout') {
      checkout(
        [
          $class: 'GitSCM', branches: [[name: '*/${GIT_BRANCH}']], doGenerateSubmoduleConfigurations: false,
          extensions: [], submoduleCfg: [], userRemoteConfigs: [[
            url: 'git@github.com:harshvegada/Sample_Cucumber_Project_With_Advance_Features.git'
          ]]
        ]
      )
      currentBuild.description = 'Branch: ' + GIT_BRANCH
      currentBuild.description += '\nEnv: ' + TARGET
    }

    stage('Install dependencies') {
        echo 'Running `mvn install`'
        bat 'mvn install'
    }

    stage('Clean previous results') {
      echo 'Running `mvn clean`'
      bat 'mvn clean'
        if(use_results_from_build_number){
          try {
              copyArtifacts filter: 'results.zip', fingerprintArtifacts: true, projectName: "${env.JOB_BASE_NAME}", selector: specific("${use_results_from_build_number}")
              unzip dir: 'results', glob: '', zipFile: 'results.zip'
          } catch (err) {
              err.getMessage()
          }
        }
    }

    stage('Run Tests') {
      environment {
        JENKINS='true'
      }
      bat "mvn test"
    }

    stage ('Archive Results') {
      bat 'del results.zip'
      zip zipFile: 'results.zip', archive: true, dir: 'results'
      archiveArtifacts allowEmptyArchive: true, artifacts: 'results.zip'
    }

    stage('Allure Report') {
      script {
        dir('results/allure/api'){
          def props = [
            ENV:TARGET,
            RUN_SCRIPT:'api-test',
            PARAMS:PARAMS,
            GIT_BRANCH:GIT_BRANCH
          ]
          def content = props.collect{entry->entry.key+"="+entry.value}.join('\n')
            writeFile file: 'environment.properties', text: content
        }
        allure([
          includeProperties: false,
          jdk: '',
          properties: [],
          reportBuildPolicy: 'ALWAYS',
          results: [[path: 'results/allure/api']],
        ])
      }
    }
  }
}
